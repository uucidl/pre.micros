#!/usr/bin/env bash

# CONFIGURATION

src_files=src/*.cpp
header_files=include/*.h
BUILD_TIMEBOX=5

## TOOLS
ASTYLE=astyle
GIT=git

## VARIABLES
HERE=$(dirname $0)
HOSTNAME=$(hostname)
OS_NAME=$(uname -s)
OS_RELEASE=$(uname -r)
OS=${OS_NAME// /_}

BUILD_DIR=${HERE}/builds/${HOSTNAME}

## IMPLEMENTATION

function require_dir() {
    mkdir -p "${BUILD_DIR}"
}

function rebuild_dir() {
    [[ -d "${BUILD_DIR}" ]] && rm -rf "${BUILD_DIR}"
    require_dir
}

function code_format() {
    astyle_output=$(
	${ASTYLE} -Q --options=${HERE}/.astylerc ${src_files} ${header_files}
    )
    if [[ -n "${astyle_output}" ]]; then
	printf "astyle returned '%s', please commit these modifications\n" "${astyle_output}"
	exit 1
    fi
}

function check_clean() {
    git_output=$(${GIT} clean -n | grep '^Would remove')
    if [[ -n "${git_output}" ]]; then
	printf "WARNING some files were produced by the build outside of %s:\n%s\n" "${BUILD_DIR}" "${git_output}"
    fi
}

function compile_default() {
    printf "define a compilation function for your OS ${OS} or host ${HOSTNAME}!"
    exit 1
}

function compile_gxxlike() {
    CFLAGS="$CFLAGS -isystem ${HERE}/include"
    CFLAGS="$CFLAGS -Wall -Wextra -Werror"
    CFLAGS="$CFLAGS -Wno-padded -Wno-unused-parameter -Wno-conversion"
    "${CXX}" -std=c++11 ${CFLAGS} ${src_files} -o ${BUILD_DIR}/main
}

function compile_clang() {
    CFLAGS="$CFLAGS -stdlib=libc++"
    CXX=clang++
    compile_gxxlike
}

compile_Darwin() {
    compile_clang
}

reg_query() {
    path=$1
    value_name=$2
    reg query "$path" //v "$value_name" 2> /dev/null | awk -F'    ' '/'"${value_name}"'/ {print $4}'
}

posix_path() {
    windows_path="$1"
    echo $(cd "$windows_path" ; pwd -P)
}

windows_path() {
    posix_path="$1"
    echo $(cd "$posix_path" ; pwd -W) | sed -e 's,\/,\\,g'
}

set_vcenv() {
    VS_WINDIR=$1

    (cmd <<EOF
bash -c set > "${BUILD_DIR}"/vcvarsall-prev.env
"${VS_WINDIR}/vcvarsall.bat"
bash -c set > "${BUILD_DIR}"/vcvarsall-after.env
EOF
    ) > /dev/null

    diff -u "${BUILD_DIR}"/vcvarsall-prev.env "${BUILD_DIR}"/vcvarsall-after.env | grep -e '^\+[^\+]' | cut -c 2- | grep -v -e '^\!' > "${BUILD_DIR}/vc.env"

    . ${BUILD_DIR}/vc.env
}

# windows 8 on msys
compile_MINGW32_NT-6.2() {
    VS_WINDIR=$(reg_query "HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VC7" 12.0)
    set_vcenv "${VS_WINDIR}"

    CL_CMD="cl.exe"
    LIB_CMD="lib.exe"
    LINK_CMD="link.exe"

    BUILD_WINDIR="$(windows_path "${BUILD_DIR}/")"
    MAIN_EXE="$BUILD_WINDIR"\\main.exe
    export LIB
    export INCLUDE
    "${CL_CMD}" ${src_files} //nologo //Fo${BUILD_WINDIR} //Fe${MAIN_EXE}
}

function compile() {
    if [[ "function" = $(type -t "compile_${HOSTNAME}") ]]; then
	compile_${HOSTNAME}
	return
    fi

    if [[ "function" = $(type -t "compile_${OS}") ]]; then
	compile_${OS}
	return
    fi

    compile_default
}

function timed_compile() {
    ts_start=$(date +'%s')
    compile
    ts_end=$(date +'%s')
    ts_elapsed=$(($ts_end - $ts_start))

    cat=INFO
    if [[ ts_elapsed -gt ${BUILD_TIMEBOX} ]]; then
	cat="ERROR"
    fi
    printf '%s compilation took %d seconds\n' $cat $ts_elapsed
}

printf "INFO building on %s (%s)\n" ${HOSTNAME} ${OS}
code_format && rebuild_dir && timed_compile && check_clean

if [[ $? -ne 0 ]]; then
    printf "ERROR error\n"
    exit 1
fi

printf "INFO success\n"
printf "INFO results:\n"
find ${BUILD_DIR} -type f
